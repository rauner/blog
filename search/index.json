[{"content":"Crafting a Multilingual, Inventory and and Help Article Aware Assistant with Rust and ChatGPT One of buycycle\u0026rsquo;s missions is to guide our users to find the best bike fitting their needs and preferences. In the rapidly evolving world of e-commerce, providing personalized and efficient customer support is crucial. To takle both goals, we develop a inventory aware assistant, pretrained on the intricacies of the platform and customer support best practices.\nSimplified Fullstack Development with Rust and htmx The development of the assistant\u0026rsquo;s frontend was greatly simplified by the use of Rust and Axum, along with htmx. Rust\u0026rsquo;s safety and performance, combined with Axum\u0026rsquo;s modularity, provided a strong foundation for building a robust backend. htmx\u0026rsquo;s ability to handle dynamic content updates made creating a responsive and interactive user interface a matter of hours rather than days. This synergy allowed us to focus on delivering a product that not only performs well but is also straightforward and enjoyable to develop and maintain.\nIntegration with ChatGPT OpenAI\u0026rsquo;s ChatGPT enhances our assistant with advanced natural language processing. It understands and generates responses in multiple languages, ensuring that users can interact in their preferred language. This integration allows the assistant to provide nuanced and contextually relevant support, drawing from a vast knowledge base of cycling information. Additonally, the API supports tools like Code Interpreter, Retrieval, and Function calling, which can be explored using the Assistants playground or by following a step-by-step integration guide. Our assitant is implemented as a typical integration of the API:\nCreate an Assistant: Define custom instructions and choose a model for your Assistant. Optionally, add files and enable tools like Code Interpreter, Retrieval, and Function calling. Create a Thread: Start a conversation thread when a user begins interacting with your Assistant. Add Messages to the Thread: As the user asks questions, add their messages to the thread. Run the Assistant on the Thread: Generate a response by calling the model and the tools associated with the Assistant. For a more detailed explanation of each step and additional features such as streaming, you can refer to the official OpenAI documentation on the Assistants API here. Inventory and Help Article Awareness The assistant is designed to be fully aware of buycycle\u0026rsquo;s inventory and help articles. It periodically queries the DB and attaches these files to the assitant to provide real-time, accurate information to users. Whether a customer is looking for a specific type of bike or needs guidance on using the platform, the assistant can pull the relevant data and offer tailored assistance.\nHow the Assistant Works Multilingual Support: The assistant can converse with users in multiple languages, offering a personalized experience to a global audience. Inventory Awareness: By making the inventory DB availbable to the assistant, it can recommend bikes from buycycle\u0026rsquo;s inventory that match the user\u0026rsquo;s preferences for category, budget, body height, and color. Content Awareness: The assistant ingestes our multi-lingual zen desk help articles to answer questions about the platform and the buying and selling process. If a query falls outside the scope of the help articles, the assistant directs users to buycycle\u0026rsquo;s contact page for further support. Implementation Highlights Scalable Backend: Built with Axum, the assistant benefits from a robust and modular web framework that scales effortlessly with demand. Dynamic Frontend: The use of htmx on the frontend ensures a dynamic and responsive user interface, with seamless partial page updates and asynchronous form submissions. Database Integration: SQLite is used for storing conversation history, providing a lightweight and fast solution for data management. Lessons Learned During the development of the buycycle Assistant, two key lessons were learned:\nStructured Data Queries: Providing the assistant with specific Python code to query the database and help articles ensures consistent and accurate information retrieval. This approach prevents the assistant from misinterpreting the data, leading to a more reliable user experience. Dynamic File Referencing: Dynamically referencing file resources with their respective file-ids after attaching them to the assistant is essential. This method guarantees that the assistant recognizes and utilizes the correct sources, maintaining the integrity of the information provided. Showcasing Main Capabilities The assistant\u0026rsquo;s two main capabilities are showcased in the following images:\nInventory Awareness: The assistant can recommend bikes from the inventory that match the user\u0026rsquo;s preferences. Help Article Awareness: The assistant can not reference to help articles links but provide information in the chat to assist users with their queries about the website and the buying and selling process. Multilingual Support: The assistant can assist users in all languages currently relevant for buycycle. Setting Up the Assistant Developers can set up the assistant with ease, thanks to Rust\u0026rsquo;s package manager and a straightforward .env file for environment variables. The assistant is also containerized with Docker, offering a consistent development and deployment environment.\nExperience the Assistant Live We invite you to experience the buycycle Assistant firsthand by visiting the live version at assistant.buycycle.com. Engage with the assistant and discover how it can enhance your journey through our platform, whether you\u0026rsquo;re looking to buy a pre-owned high-end sport bike or seeking assistance with our services.\nOutlook: Connecting to Data Science Products Looking ahead, buycycle plans to expand the capabilities of our assistant by connecting it to other Data Science products, such as personalized bike recommendations. This integration will leverage user data and machine learning models to further refine the assistant\u0026rsquo;s ability to provide customized suggestions, enhancing the personal touch that buycycle is known for.\nRepository buycycle Assistant Repository Repo ","date":"2024-03-21T00:00:00+07:00","image":"https://rauner.github.io/blog/p/buycycle-assistant/cover_hu28a28197c4203f9953f1e6589a6322a6_2649689_120x120_fill_box_smart1_3.png","permalink":"https://rauner.github.io/blog/p/buycycle-assistant/","title":"buycycle's Inventory and and Help Article Aware Assistant"},{"content":"buycycle emerges as a transformative platform in the pre-owned bicycle market. A market hindered before by high transaction costs that deterred customers from considering used bikes over buying new. These costs, ranging from complex cross-border shipping to concerns over buyer and seller trust and prevalent information inefficiencies, are now being mitigated through buycycle\u0026rsquo;s comprehensive service offerings.\nBy centralizing services such as streamlined international shipping, secure escrow payment systems, and robust insurance options, buycycle aims at reducing the barriers to buying and selling pre-owned bikes. This not only elevates the value proposition of second-hand bicycles but also enhances market efficiency, making pre-owned options more competitive against new purchases.\nEnvironmental benefits are inherent in our business model, promoting bicycle reuse, reducing CO2 emissions, and supporting sustainable consumption. Economically, buycycle enables more affordable cycling options, fostering broader adoption and healthier lifestyles while lessening dependence on costlier transport.\nOne key tool to achieve this is through Democratizing Bike Market Information, providing detailed bike insights to inform buyers and sellers alike.\nDemocratizing Bike Market Information A core mission of buycycle is to establish a level playing field by ensuring all market participants have access to comprehensive and symmetrical information. To this end, we offer a detailed buyers guide to empower consumers, provide precise bicycle valuations, and facilitate the connection between buyers and sellers by aligning the right bikes with user preferences. Achieving such transparency is made possible through our commitment to data-driven services, which forms the cornerstone of the buycycle platform.\nPersonalization emerges as a natural progression in our quest to democratize market information. By leveraging the power of machine learning, we aim to curate a tailored experience for each user, ensuring that the wealth of information available is not only accessible but also actionable. This focus on personalization is not just about enhancing user experienceâ€”it\u0026rsquo;s about transforming data into meaningful interactions that resonate with the individual needs and desires of our customers.\nIt is with this vision in mind that our data science team embarked on the development of our inaugural in-house machine learning model.\nData-Driven Personalization Imagine a user overwhelmed by the choice of 20,000 bikes on sale. They need assistance in finding the perfect fit, which may not always be readily available due to the nature of pre-owned stock. The recommendation system is tailored to help users navigate this vast selection effectively. On the other hand we need to ensure if the exact bike a user wants isn\u0026rsquo;t in stock, they won\u0026rsquo;t leave the platform empty-handed. Instead, they\u0026rsquo;ll be presented with a curated selection of alternatives that meet their needs and preferences, making the shopping experience personalized and efficient.\nThe recommendation system is designed to address four key aspects:\nRelevance: Ensuring that the bikes recommended meet the user\u0026rsquo;s specific needs and preferences. Novelty: Introducing users to bikes they may not have previously considered or known about. Serendipity: Surprising users with bikes that they might find unexpectedly appealing. Diversity: Offering a wide range of bikes to prevent redundancy in recommendations. Personalization Engine buycycle\u0026rsquo;s Personalization engine employs a two-tiered approach to cater to users with varying levels of historic feedback data.\nThe first tier is a content-based model that suggests bikes based on specific attributes such as type, size, and brand, ideal for users with clear preferences or limited interaction history.\nThe second tier utilizes collaborative filtering, which leverages user behavior and feedback to refine recommendations. This model identifies patterns in user interactions to suggest bikes that similar users have shown interest in, enhancing personalization as more data becomes available.\nOur system is built as a Flask app, hosted on Kubernetes for scalability and managed with ArgoCD for continuous deployment, ensuring reliability and up-to-date functionality. For a deeper look into our system, visit our Repository section.\nRepository Personalization Engine Repo Content-Based Our Personalization engine\u0026rsquo;s content-based filtering is designed to suggest bikes based on their features, independent of user history. This is crucial when user preferences are unknown, focusing instead on the attributes of the bikes as shown in Figure 1. The model compares bikes\u0026rsquo; characteristics, such as brand, frame size, brake type, and color, to identify similar options.\nid template_id price msrp 35551 18128 3400.0 5800.0 bike_created_at_year bike_created_at_month bike_year sales_country_id 2023 11 2021 137 bike_type_id bike_category_id mileage_code motor 1 1 3000_10000 city condition_code frame_size rider_height_min Berlin 3.0 56 173.0 rider_height_max brake_type_code frame_material_code shifting_code 183.0 hydraulic carbon electronic bike_component_id color family_model_id family_id 14 #3B82F6 8727 3088 brand_id quality_score is_mobile currency_id 45 30 0 2 seller_id is_ebike is_frameset 151982:w\\ 0 0 Excerpt of bike feature data For example, the bike with id 465551, detailed in our bike feature table, has a frame size of 56 and a color code referencing blue.\nUsing euclidean distance between the feature vectors (a concept developed 300BCE), we measure the similarity between bikes in a feature space, ranking them by similarity scores. We found that euclidean distance allows the weighing of features according to their importance over cosine similarity.\nAs Figure 1 demonstrates, the content-based recommendations closely match the featured bike in key features such as components level, price, size, and color. This ensures that even without user input, our recommendations are likely to align with what users might find appealing and within their expected budget and aesthetic preferences.\nIn summary, our content-based filtering leverages a detailed bike feature table to present users with bike suggestions that are similar in price, size, and color, ensuring relevance and potential appeal in every recommendation.\nContent Based Similarity Collaborative Filtering Our collaborative filtering model personalizes bike recommendations by learning from user behaviors like views, add to favorites and purchases. It uses machine learning, stylized in Figure 2, to predict interests from similar users\u0026rsquo; patterns, ensuring relevance.\nFor instance, if User A likes both aero and gravel bikes, we might suggest gravel bikes to User B. She is so far only interested in aero bikes but her similarity to user A suggests that she might be interested in gravel bikes too, introducing novelty and serendipity. This method also diversifies options, preventing monotonous suggestions. Our hybrid approach, based on Kula, 2015, combines content-based insights with collaborative filtering, offering users a dynamic selection of pre-owned bikes that align with their preferences.\nCollaborative Filtering This model takes into account user-item interactions and extracts latent features to inform its recommendations, incorporating elements of swarm intelligence.\nEvaluating Recommendation Strategies: A/B Testing Insights In our pursuit to refine recommendation accuracy, we conducted a two-week A/B test, as depicted in Figure 3, to compare the effectiveness of purely content-based filtering against a hybrid approach that combines content-based and collaborative filtering. During this trial, we observed user interactions with recommendations generated by both models. The content-based model operated solely on bike features (stable), while the hybrid model also considered user behavior and preferences (canary).\nThe A/B test results were compelling, revealing a 40% increase in conversion ratesâ€”from viewing recommendations to placing orders, when the hybrid model was employed over the content-based model alone. Figure 3 showcases the A/B test outcomes over the 14-day period, providing clear evidence that integrating collaborative filtering with content-based insights leads to a more engaging and effective recommendation system. This hybrid approach not only aligns with users\u0026rsquo; specific tastes but also introduces them to new bike categories they might not have considered, enhancing the overall user experience.\n","date":"2023-12-12T21:10:00+07:00","image":"https://rauner.github.io/blog/p/recommendation/cover_hu7ed6f6231caa80d8c9c1b5997ad0f3f1_726405_120x120_fill_box_smart1_3.png","permalink":"https://rauner.github.io/blog/p/recommendation/","title":"Navigating the Pre-Owned Bike Market"},{"content":"Deciding where to cycle is one of the most important ingredients for a good time on the bike. In the past, for the ideal route, you needed a friend that knew the surrounding roads inside out, or you spent hours studying some map. Today, it\u0026rsquo;s a lot easier: two taps with your finger and we\u0026rsquo;ve got a great starting point to refine the perfect route for your tour. And for that it doesn\u0026rsquo;t even matter if we want to make the daily commute to work a little nicer or if we want to spend several days riding through the Alps Bikepacking. So in today\u0026rsquo;s blog post, we\u0026rsquo;ll introduce you to a few of the most helpful route planning tools to make your next cycling adventure even easier to prepare and more enjoyable to experience. We will intentionally focus on opensource tools that provide the most customization and provide a way to actively contribute to the tools and underlying maps.\nOfficial Cycling routes in OpenStreetMap. OpenStreetMap In fact, the vast majority of bike-specific routing solutions, which also take into account important criteria such as preference for elevation changes, road surfaces, or avoiding dangerous roads, are based on OpenStreetMap. This platform offers you a free, editable map of the world created by a global community of volunteers. Users can share, edit, and use all kinds of geographic data on OpenStreetMap, so you can find the very last trail, viewpoint, or hidden bike path. Whether in the city or off the beaten path - OpenStreetMap knows every spot. Even bicycle parking and repair stations, which is particularly practical for cyclists. And if it is not there yet, you can add it to the maps database. What is clear is that this sheer mass of data and detail could never in a lifetime be collected and continuously updated at this density by a single company. OpenStreetMap is therefore a true boon for route planning, from the Community, for the community.\nSurface categories make it easy to tweak surface types. BRouter Planning and riding a great route in general consists of two parts, the planning before and the navigation during your ride. BRouter is another open source project (based on OpenStreetMap) that covers the planning phase. And it works both in the app and on the web. Here you can find various maps in satellite or topographic view, as well as cycling-specific overlays that give you access to entire libraries of bike trails (including those from waymarked trails saved routes). Additionally, you will also find Gravel-, mountain bike- or road bike routing profiles, which you can even customize to your individual needs in a second step. A great feature is the surface and road type view. Here you can see how much of your ride is the types you prefer and by clicking on them get highlight live on the map, a great tool for refining the route. Once satisfied, you only need to save the map as a gpx file and download it on your navigation device. In addition, and this is unfortunately still relatively rare among navigation software, your data is neither shared with third-party providers, nor tracked or stored in any other way. You are also spared from in-app purchases or advertising. All this makes BRouter a great tool for planning your next trip, although the rich interface might take some time and effort to get used to.\nRoad bike minimized traffic routing from Munich over the Stelvio pass to Meran. osmAnd The gpx file from BRrouter can be imported into any navigation device. However, if you just want to use your phone, there are great apps that guide you safely and with ton of additional features. The app osmAnd is one of them and offers two crucial advantages: Bike-specific maps and turn-by-turn voice navigation. For you, this means: Stash your phone in your pocket or mount it on your handlebar and off you go. With several available plug-ins you can also connect your favorite weather app, the now familiar BRouter for offline maps, Topography for elevation profiles or even Wikipedia with osmAnd. The latter accesses your location while driving and informs you about surrounding national parks, statues, monuments, cities and\u0026hellip; Well, about pretty much everything, that you cycle past that has a Wikipedia entry. That way you challenge your body and educate yourself at the same time! The app is free, but you have to pay extra for a few plugins. Fortunately, this is not absolutely necessary, as the free version already offers (almost) everything you need. Pro tip: The developers want to foster open source and give a free pro version when using the alternative app store F-Driod. OpenStreetMap, BRouter and osmAnd are all opensource projects. While their data base is huge and their opensource character makes them great free, democratic and tools that benefit us all, they can be a bit hard to navigate and use. So if you\u0026rsquo;re looking for something a bit more user-experience oriented, these next suggestions might be just right for you!\nA tour through the Berlin Tiergarten as suggested by osmAnd with the Wikipedia plug-in active. ","date":"2023-12-11T21:10:00+07:00","image":"https://rauner.github.io/blog/p/route-planning/cover_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://rauner.github.io/blog/p/route-planning/","title":"The beauty of open source route planning"},{"content":"Hugo theme Stack supports the creation of interactive image galleries using Markdown. It\u0026rsquo;s powered by PhotoSwipe and its syntax was inspired by Typlog.\nTo use this feature, the image must be in the same directory as the Markdown file, as it uses Hugo\u0026rsquo;s page bundle feature to read the dimensions of the image. External images are not supported.\nSyntax 1 ![Image 1](1.jpg) ![Image 2](2.jpg) Result Photo by mymind and Luke Chesser on Unsplash\n","date":"2023-08-26T00:00:00Z","image":"https://rauner.github.io/blog/p/image-gallery/2_hubce42636ecacc1a380b462f3110efcec_37455_120x120_fill_q75_box_smart1.jpg","permalink":"https://rauner.github.io/blog/p/image-gallery/","title":"Image gallery"}]